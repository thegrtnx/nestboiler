generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  userId                 String               @id @default(cuid())
  firstName              String
  lastName               String
  email                  String               @unique
  password               String
  bio                    String?
  dob                    DateTime?
  role                   Role                 @default(USER)
  referralCode           String?              @unique
  telephoneNumber        String?              @unique
  profilePictureUrl      String?
  profilePicturePublicId String?
  otp                    String?
  token                  String?
  accountStatus          Status               @default(PENDING)
  isActive               Boolean              @default(false)
  otpExpiry              DateTime?
  resetOtp               String?
  resetOtpExpiry         DateTime?
  createdAt              DateTime             @default(now())
  updatedAt              DateTime             @updatedAt
  Referral               Referral?
  refreshToken           String?
  Wallet                 Wallet?
  WalletBalance          WalletBalance?
  TransactionHistory     TransactionHistory[]

  @@index([userId])
  @@index([email])
  @@index([referralCode])
  @@index([accountStatus])
  @@index([isActive])
  @@index([role])
  @@index([telephoneNumber])
  @@index([createdAt])
  @@index([updatedAt])
}

model Referral {
  referralId   String   @id @default(cuid())
  userId       String   @unique
  user         User     @relation(fields: [userId], references: [userId], onDelete: Cascade)
  referralCode String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([referralId])
  @@index([referralCode])
  @@index([userId])
  @@index([createdAt])
  @@index([updatedAt])
}

model Wallet {
  wallet_id     String   @id @default(cuid())
  accountNumber String   @unique
  bankName      String?
  dva_id        Int?
  accountName   String?
  bankId        Int?
  currency      String?
  cust_code     String?  @unique
  cust_id       Int?
  userId        String   @unique
  user          User     @relation(fields: [userId], references: [userId], onDelete: Cascade)
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt

  @@index([wallet_id])
  @@index([userId])
  @@index([accountNumber])
  @@index([bankName])
  @@index([accountName])
  @@index([created_at])
  @@index([updated_at])
}

model WalletBalance {
  balanceId   String   @id @default(cuid())
  userId      String   @unique
  user        User     @relation(fields: [userId], references: [userId], onDelete: Cascade)
  balance     Float    @default(0.0)
  lastBalance Float    @default(0.0)
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  @@index([balanceId])
  @@index([userId])
  @@index([balance])
  @@index([created_at])
  @@index([updated_at])
}

model TransactionHistory {
  transactionHistoryId String      @id @default(cuid())
  amount               Float
  paymentType          PaymentType
  prevBalance          Float
  newBalance           Float
  paymentReference     String
  extRef               String?
  currency             String?
  channel              String?
  charge               Float?
  chargeNarration      String?
  senderBank           String?
  senderAccount        String?
  recieverBank         String?
  recieverAccount      String?
  paymentDescription   String
  paid_at              DateTime?
  createdAt            DateTime    @default(now())
  updatedAt            DateTime    @updatedAt
  User                 User?       @relation(fields: [userUserId], references: [userId])
  userUserId           String?

  @@index([transactionHistoryId])
  @@index([amount])
  @@index([paymentType])
  @@index([paymentReference])
  @@index([extRef])
  @@index([currency])
  @@index([channel])
  @@index([charge])
  @@index([chargeNarration])
  @@index([senderBank])
  @@index([senderAccount])
  @@index([recieverBank])
  @@index([recieverAccount])
  @@index([paymentDescription])
  @@index([userUserId])
  @@index([createdAt])
  @@index([updatedAt])
}

enum PaymentType {
  DEBIT
  CREDIT
  REFUND
  COUPON
}

enum PaymentSource {
  PAYSTACK
  WALLET
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
}

enum Role {
  USER
  RIDER
  SUPER_ADMIN
  ADMIN
  FINANCE
  DEVELOPER
  SUPPORT
}

enum Status {
  ACTIVE
  APPROVED
  PENDING
  SUSPENDED
  ARCHIVED
  FRAUD
  REJECTED
  FULFILLED
  ACCEPTED
  KYC_1
  KYC_2
  KYC_3
}

enum AccountType {
  INDIVIDUAL
  BUSINESS
}

enum Gender {
  MALE
  FEMALE
}
